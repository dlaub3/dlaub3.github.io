webpackJsonp([0xcffabddef680],{325:function(n,s){n.exports={data:{markdownRemark:{html:'<h3>Browser support</h3>\n<p>To see a comprehensive list of support for ES6 see <a href="https://kangax.github.io/compat-table/es6/">https://kangax.github.io/compat-table/es6/</a> </p>\n<p>Because ES6 isn\'t fully supported it should be transpiled to ES5. Babel is the most popular transpiler.  For small projects you can link to a Babel transpiler and transpile in the browser. However, this is slow and not recommended for working on large projects or for production. </p>\n<h3>A few new features in ES6</h3>\n<h4>let</h4>\n<p>Let is used to define variables. Here is an example of it\'s usage. </p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="javascript"><code class="javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//global variable </span>\n\n<span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//the value of x isn\'t change globally. </span></code></pre>\n      </div>\n<p> As you can see <code class="text">let</code> allows you to declare variables that are limited to the statement, block, or expression. </p>\n<h4>const</h4>\n<p>Const creates a read-only reference to a variable but it\'s not immutable. </p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="javascript"><code class="javascript"><span class="token keyword">const</span> dozen <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> \n<span class="token keyword">var</span> dozen <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">//will not work </span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>dozen <span class="token operator">===</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> dozen <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">//this will work</span>\n  \n  <span class="token comment">//dozen is now 13</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dozen<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n\n<span class="token comment">//dozen is still 12.</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dozen<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t</code></pre>\n      </div>\n<h4>Template literals</h4>\n<p>These are also called template strings or string literals. </p>\n<p>Template literals are used for strings. </p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="javascript"><code class="javascript"><span class="token template-string"><span class="token string">`This is a little string I wrote\n might want to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>read<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> it in a boat. \n That\'s weird man. I know man.`</span></span></code></pre>\n      </div>\n<p>Template literals preserve white space and line breaks. They also allow you to include expressions. </p>\n<h4>Arrow functions</h4>\n<p>While the new syntax of arrow functions is quite nice...</p>\n<div class="gatsby-highlight" data-language="javascript">\n      <pre class="javascript"><code class="javascript"><span class="token keyword">var</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> args<span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token number">5</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> numf <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>num <span class="token operator">=></span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>It does more than provide a cleaner syntax. It also helps the problem of <code class="text">this</code>.  Arrow functions don\'t have their own <code class="text">this</code>.  They inherit <code class="text">this</code> from the enclosing scope. </p>\n<h3>ES7</h3>\n<p>Interested in ES7? Check out <a href="https://github.com/tc39">https://github.com/tc39</a></p>\n<h3>References</h3>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let</a></p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const</a></p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a></p>\n<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p>\n<p><a href="https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/">https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/</a></p>',frontmatter:{title:"ES 6 Notes",date:"July 22nd, 2018"}}},pathContext:{slug:"/blog-posts/ecmascript/ES6-notes/"}}}});
//# sourceMappingURL=path---blog-posts-ecmascript-es-6-notes-ef3f0c114433abe87b73.js.map
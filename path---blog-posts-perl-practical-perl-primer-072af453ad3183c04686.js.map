{"version":3,"sources":["webpack:///path---blog-posts-perl-practical-perl-primer-072af453ad3183c04686.js","webpack:///./.cache/json/blog-posts-perl-practical-perl-primer.json"],"names":["webpackJsonp","326","module","exports","data","markdownRemark","html","frontmatter","title","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAoqmFC,aAAmhCC,MAAA,wBAAAC,KAAA,qBAA2DC,aAAgBC,KAAA","file":"path---blog-posts-perl-practical-perl-primer-072af453ad3183c04686.js","sourcesContent":["webpackJsonp([101223163826097],{\n\n/***/ 326:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Documentation</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># https://perldoc.perl.org/index-language.html</span>\\nperldoc <span class=\\\"token operator\\\">-f</span> chomp <span class=\\\"token comment\\\"># perldoc on chomp</span>\\nperldoc perlfaq</code></pre>\\n      </div>\\n<p>Misc</p>\\n<ul>\\n<li>\\n<p>The semicolon is technically a separator, but it is good practice to use it as a terminator at the end of each line of code. </p>\\n</li>\\n<li>\\n<p>Whitespace is mostly ignored.</p>\\n<p>â€‹</p>\\n</li>\\n</ul>\\n<p>Variables and Values </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># represent a scalar value with $, Perl uses duck typeing for scalar value</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$n</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># represent arrays with @</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@array</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw(one two three four five)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># represent hashes with %</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">%hash</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>one <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> two <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> three <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># a list is a fixed series of scalar values. </span>\\n<span class=\\\"token comment\\\"># a list is not a data type, but it is used to create arrays and hashes in the examples above. </span>\\n<span class=\\\"token comment\\\"># a list is created with \\\"()\\\". </span>\\n<span class=\\\"token comment\\\"># a list is not mutable. </span>\\n<span class=\\\"token comment\\\"># it's possible to create references to lists.</span>\\n<span class=\\\"token variable\\\">$list</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'one'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'one'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'three'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token variable\\\">$var</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># force num </span>\\n<span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">.</span> <span class=\\\"token variable\\\">$var</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># force string</span></code></pre>\\n      </div>\\n<p>Statements and Expressions </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># expressions represent values</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># statements instruct computers on how to execute code</span>\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> main</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"Hi\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Assignment Examples </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">my</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$x</span><span class=\\\"token punctuation\\\">,</span> $<span class=\\\"token regex\\\">y, $z ) = ( 1, 2,</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># assign multiple scalare variables from a list</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@array</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># create an array from a list</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$count</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># assign the length of the array</span></code></pre>\\n      </div>\\n<p>Block and Scope</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\">#!/usr/bin/perl</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token vstring string\\\">5.18.0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> warnings<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> strict<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># if there is no block the scope is the whole file. Perl is block scoped.</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\"># $var scope is locally to code block</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$num</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$num</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\"># $num2 is scoped to this code block </span>\\n  <span class=\\\"token comment\\\"># since that is where it's defined</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$num2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token comment\\\"># $num can be used here </span>\\n  <span class=\\\"token variable\\\">$num</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$num</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token variable\\\">$num2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\"># $num2 is out of variable scope</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$num2</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Logical Values </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># false values: '', 0, []  in general things that are empty or evalute to 0</span>\\n<span class=\\\"token comment\\\"># everything else evaluates to true</span>\\n<span class=\\\"token comment\\\"># this is becuase of Perls duck typing.</span>\\nhttps<span class=\\\"token punctuation\\\">:</span><span class=\\\"token operator\\\">//</span>perlmaven<span class=\\\"token operator\\\">.</span>com<span class=\\\"token operator\\\">/</span>boolean<span class=\\\"token operator\\\">-</span>values<span class=\\\"token operator\\\">-</span>in<span class=\\\"token operator\\\">-</span>perl</code></pre>\\n      </div>\\n<p>Strings</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"I am a string\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"s is [$s]\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">#string concatenation</span>\\n$<span class=\\\"token regex\\\">s .= \\\" in a Perl expression\\\";\\n\\n#string interpolation\\nsay \\\"My name is String. $s .</span><span class=\\\"token string\\\">\\\";\\nsay \\\"</span>My name is String<span class=\\\"token operator\\\">.</span> <span class=\\\"token operator\\\">\\\\</span>\\\"<span class=\\\"token variable\\\">$s</span><span class=\\\"token operator\\\">\\\\</span>\\\" <span class=\\\"token operator\\\">.</span>\\\"<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"My name is String. ${s}.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">qq(My name is String. $s .)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Arrays</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@array</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>one<span class=\\\"token punctuation\\\">,</span> two<span class=\\\"token punctuation\\\">,</span> three<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$array</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># the $ is used to reference a scalar value in the array.</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$count</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\npush <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">qw(one two three)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$item</span> <span class=\\\"token operator\\\">=</span> pop <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># slices represent part of the whole</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">...</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@arr2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># create a reference to an anonymous array.</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@arr</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( one, two, three, four )</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">\\\\</span><span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># dereference the reference into the array it references</span></code></pre>\\n      </div>\\n<p>Hashes</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># hash values are not stored in any predictable order</span>\\n\\n<span class=\\\"token comment\\\"># create anonymous hash reference </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    one <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">\\\"one\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    two <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">\\\"two\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># access element</span>\\n<span class=\\\"token variable\\\">$</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">{</span>one<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-></span><span class=\\\"token punctuation\\\">{</span>one<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># create a hash</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">%hash</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>\\n\\tone <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span>\\n\\ttwo <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'two'</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$k</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$v</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> each <span class=\\\"token variable\\\">%hash</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"$k -> $v\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">## refrence an anonymous function</span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$k</span> <span class=\\\"token punctuation\\\">(</span>sort<span class=\\\"token punctuation\\\">(</span>keys <span class=\\\"token variable\\\">%hash</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$v</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$hash</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$k</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"$k -> $v\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> keys <span class=\\\"token variable\\\">%hash</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> values <span class=\\\"token variable\\\">%hash</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Constants  and Static Variables</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># contants can be create in perl as follows</span>\\n<span class=\\\"token keyword\\\">use</span> contant <span class=\\\"token punctuation\\\">{</span>\\n  PIE <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">3.1415</span>\\n  TRUE <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> \\n  FALSE <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">''</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># The use constant is the same as the sub below. </span>\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> PIE</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token number\\\">3.1415</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\"># Perl 5.10 + support static variabls </span>\\n<span class=\\\"token keyword\\\">use</span> feature <span class=\\\"token string\\\">'state'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">state</span> <span class=\\\"token variable\\\">$n</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># static variable will not be garbage collected for the entire runtime of the script. So if you use it in a function, consecutive function calls will remember the value.</span></code></pre>\\n      </div>\\n<p>Conditionals </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">==</span> $<span class=\\\"token regex\\\">y ) {\\n  $x = $y;\\n} elsif ( $x > $y ) {\\n  # note the spelling 'elsif'\\n $x = 10;\\n} else {\\n  $x = 15;\\n}\\n\\n# single line postifix if\\n# can't use else \\nsay 'true' if $x = 1;\\n\\n# unless \\nsay 'true' unless $x = 1;\\n\\n# Don't do this 'given' and switches are generally discouraged.\\nmy $x;\\nmy $y;\\nmy $z;\\n\\ngiven($v)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'default'</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># instead do this</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">%hash</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$y</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'y'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$z</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'z'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$hash</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$x</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$hash</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$v</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'default'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># ternary if </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$y</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'x'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'y'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Loops </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># iterate over a quote word list</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span>  <span class=\\\"token string\\\">qw(one two three)</span>\\n\\n<span class=\\\"token comment\\\"># while </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@array</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( one two three four five )</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$count</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> shift <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token variable\\\">$y</span> <span class=\\\"token operator\\\">=</span> shift <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">next</span> <span class=\\\"token keyword\\\">if</span> $<span class=\\\"token regex\\\">y eq 20;\\n  last if $y eq  5;\\n} continue</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token variable\\\">$count</span><span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># for</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$i</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token variable\\\">$arr</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">$i</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token operator\\\">++</span><span class=\\\"token variable\\\">$i</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"$i: \\\"</span> <span class=\\\"token operator\\\">.</span> <span class=\\\"token variable\\\">$arr</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">$i</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># foreach</span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@arr</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$s</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Default Variables </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># https://perldoc.perl.org/perlvar.html</span>\\n<span class=\\\"token comment\\\"># http://www.perlmonks.org/?node_id=353259</span>\\n\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">@arr</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  says <span class=\\\"token variable\\\">$_</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\"># $_ optional value ommited will use the default variable $_</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@arr</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfunc1<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'one'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'two'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func1</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'this is func1'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@_</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$a</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$b</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@_</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\"># push pop shift unshift all use the default array variable</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># system error variable </span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token operator\\\">-e</span> <span class=\\\"token variable\\\">$file</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"found\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$error</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$!</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># error variable </span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$error</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># env variables </span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$k</span> <span class=\\\"token punctuation\\\">(</span>sort keys <span class=\\\"token variable\\\">%ENV</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"$k = $ENV{$K}\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@ARGV</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># command-line arguments</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@numbers</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( 3 2 6 5 8 7 9 2 3 7 )</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@numbers</span> <span class=\\\"token operator\\\">=</span> sort <span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">&lt;=></span> <span class=\\\"token variable\\\">$b</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token variable\\\">@numbers</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># $a and $b are sort variables.</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$0</span>   <span class=\\\"token comment\\\"># path of script </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$^</span>o<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># system name </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$^V</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># version of perl </span>\\n\\n<span class=\\\"token comment\\\"># autoflush variable, the system flushes the buffer at it's own disgression </span>\\n<span class=\\\"token variable\\\">$|</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># this turns on outoflush </span></code></pre>\\n      </div>\\n<p>Operators </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># $x = 1 + 2;</span>\\n<span class=\\\"token comment\\\"># \\\"\\\" eq | ne \\\"\\\"</span>\\n<span class=\\\"token comment\\\"># 1 == 1</span>\\n<span class=\\\"token comment\\\"># % modulus returns the remainder of division</span>\\n\\n<span class=\\\"token comment\\\"># compound assignment operator only evaluates once</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">## addition evaluates twice </span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">## relational Operators </span>\\n<span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">6</span>\\n<span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">6</span>\\n<span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">6</span>\\n<span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">6</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">57</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># string operators</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">eq</span> <span class=\\\"token string\\\">\\\"str\\\"</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">ne</span> <span class=\\\"token string\\\">\\\"str\\\"</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">lt</span> <span class=\\\"token string\\\">\\\"str\\\"</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">le</span> <span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token comment\\\"># less than or equal to</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">gt</span> <span class=\\\"token string\\\">\\\"str\\\"</span>\\n\\n<span class=\\\"token comment\\\">## logical opperators</span>\\n<span class=\\\"token keyword\\\">use</span> constant <span class=\\\"token punctuation\\\">{</span> TRUE <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> FALSE <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">\\\"\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">and</span> <span class=\\\"token comment\\\">## ( true and true) == true</span>\\n<span class=\\\"token operator\\\">or</span>  <span class=\\\"token comment\\\">## ( false and true) == true </span>\\n<span class=\\\"token operator\\\">xor</span> <span class=\\\"token comment\\\">## one true the other false  (false and true) == true</span>\\n<span class=\\\"token operator\\\">not</span> <span class=\\\"token comment\\\">## ( not FALSE or not True) == true</span>\\n\\n<span class=\\\"token comment\\\">## File test operators </span>\\n<span class=\\\"token comment\\\"># see perldoc functions -X</span>\\n<span class=\\\"token comment\\\"># -s, non zero length</span>\\n<span class=\\\"token comment\\\"># -z, zero length</span>\\n<span class=\\\"token comment\\\"># -r, readable</span>\\n<span class=\\\"token comment\\\"># -w, writable</span>\\n<span class=\\\"token comment\\\"># -f, plain file </span>\\n<span class=\\\"token comment\\\"># -d, directory</span>\\n<span class=\\\"token comment\\\"># -e tests if file exists </span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-e</span> <span class=\\\"token variable\\\">$filename</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># Range Operator </span>\\n<span class=\\\"token comment\\\"># numbers, letters, dates,</span>\\n<span class=\\\"token comment\\\"># The range operator returns a list and can be used to create arrays </span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$i</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">...</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">\\\"$i \\\"</span><span class=\\\"token punctuation\\\">:</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># String concatentation operator </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">.</span> <span class=\\\"token string\\\">\\\"ing\\\"</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token comment\\\">## Quote operators </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">q(Hello World)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">## no interpolation single quote marks</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">qq()</span> <span class=\\\"token comment\\\">## qq||, qq{} interprets variables like double quote </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">qw(one two three)</span> <span class=\\\"token comment\\\">## returns a list </span>\\n\\n<span class=\\\"token comment\\\"># Operator Precedence and Associativity</span>\\n<span class=\\\"token comment\\\"># https://perldoc.perl.org/perlop.html#Operator-Precedence-and-Associativity</span>\\n<span class=\\\"token comment\\\"># similar to mathematics</span></code></pre>\\n      </div>\\n<p>Context</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># perl supports two contexts list and scalar</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@arr</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw(one two three four five)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># an array can be used in list context or scalar context </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># list context will iterate over each element. </span>\\n<span class=\\\"token keyword\\\">say</span> scalar <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># because we are accessing a scalar value it is the length of the arrays</span>\\n\\n<span class=\\\"token comment\\\"># context is important as it affect how certain functions and structure bahave in perl. </span>\\n\\n<span class=\\\"token comment\\\"># A sub can determine what context it was called in by using wantarray.</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> wantarray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">\\\"list\\\\n\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># https://perlmaven.com/scalar-and-list-context-in-perl</span></code></pre>\\n      </div>\\n<p>Regular Expressions</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># string replacement</span>\\n<span class=\\\"token keyword\\\">my</span> $<span class=\\\"token regex\\\">s = qq{I am a string with -- words and :: other characters};\\n$s =~ s/:/-/g;\\nsay $s;\\n\\n# string search\\nmy $s =</span> <span class=\\\"token string\\\">\\\"this is a line\\\"</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$re</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">qr/line/</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> $<span class=\\\"token regex\\\">s =~ $re ? \\\"True\\\" : \\\"False\\\";\\n\\nif ( $s =~ /line/i ) {\\n}\\n \\n# extract a match \\nmy $match =</span><span class=\\\"token operator\\\">~</span> <span class=\\\"token regex\\\">/(line)/</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># extract list of matches</span>\\n<span class=\\\"token keyword\\\">my</span> $<span class=\\\"token regex\\\">s = \\\"this is a string\\\";\\nmy @match = $s =</span><span class=\\\"token operator\\\">~</span> <span class=\\\"token regex\\\">/i(.)/g</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\"># . 1 charater</span>\\n<span class=\\\"token comment\\\"># + 1 or more </span>\\n<span class=\\\"token comment\\\"># * 0 or more </span>\\n<span class=\\\"token comment\\\"># whildcard matching is greedy use *? to prevent greedy</span>\\n<span class=\\\"token comment\\\"># (tex?t) ? # optionally match the \\\"t\\\"</span>\\n<span class=\\\"token comment\\\"># \\\\s whitespace</span>\\n<span class=\\\"token comment\\\"># \\\\S not whitespace</span>\\n<span class=\\\"token comment\\\"># \\\\d digit </span>\\n<span class=\\\"token comment\\\"># \\\\D not digit </span>\\n<span class=\\\"token comment\\\"># \\\\w word class characters</span>\\n<span class=\\\"token comment\\\"># \\\\W none word characters</span>\\n<span class=\\\"token comment\\\"># [1234asdlk] anything in the brackets</span>\\n<span class=\\\"token comment\\\"># [1-9] 1-9,  [^1-9] not 1-9</span>\\n<span class=\\\"token comment\\\"># meta characters  {} [] () ^ $ . | * + ? \\\\</span>\\n<span class=\\\"token comment\\\"># use \\\"\\\\\\\" to escape meta characters</span>\\n\\n<span class=\\\"token comment\\\"># https://perldoc.perl.org/perlre.html</span></code></pre>\\n      </div>\\n<p>Functions and Subroutines </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># Subroutines and Functions are essentially the same thing in perl </span>\\n<span class=\\\"token comment\\\"># Gernally, it's best to return a scalar, a list, or a reference  </span>\\n<span class=\\\"token comment\\\"># IMPORTANT: The context a function is called in will propogate to the return value of the function.So the context of the return value will be either scalar or list based on how the context of the function. </span>\\n<span class=\\\"token comment\\\"># A sub can determine what context it was called in by using wantarray.</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> wantarray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">\\\"list\\\\n\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\"># Function names have global scope and they can be called before they are defined in a script.</span>\\n<span class=\\\"token comment\\\"># Functions always return. Either explicitly by calling return or the last statement executed will be implicitly returned. It's reccomended to always explicitly return</span>\\n<span class=\\\"token comment\\\"># Perl supportes closures and higher order functions and is considered a functional programming languages. </span>\\n<span class=\\\"token comment\\\"># https://hop.perl.plover.com/</span>\\n<span class=\\\"token comment\\\"># http://www.perlmonks.org/?node_id=450922</span>\\n\\nhello<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> hello</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> say</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$word</span> <span class=\\\"token operator\\\">=</span> shift<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># get variable from default array;</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$word</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> say</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@_</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># Get variables from default array </span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># function references </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">\\\\</span><span class=\\\"token variable\\\">&amp;amp</span><span class=\\\"token punctuation\\\">;</span>func<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"This is a func\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">#either works</span>\\n<span class=\\\"token variable\\\">&amp;amp</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">sub</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"anonymously, yours\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\"># refrence an anonymous function  </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> func<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\"># This is a closure in perl.</span>\\n\\t<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"I am a local variable\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\treturn <span class=\\\"token keyword\\\">sub</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>References </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># References are smaller pieces of memory refer to larger pieces of memory. They are useful for working with arrays, hashes, and functions.</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@arr</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( one, two, three, four )</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">\\\\</span><span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># dereference the reference into the array it references</span>\\n\\n<span class=\\\"token comment\\\"># create a reference to an anonymous array</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">qw( one, two, three, four )</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># parens alone creat an anonymous list </span>\\n<span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> one<span class=\\\"token punctuation\\\">,</span> two<span class=\\\"token punctuation\\\">,</span> three<span class=\\\"token punctuation\\\">,</span> four <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># create anonymous hash reference </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    one <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token string\\\">\\\"one\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    two <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token string\\\">\\\"two\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># access element</span>\\n<span class=\\\"token variable\\\">$</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">{</span>one<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span>one<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># function references </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">\\\\</span><span class=\\\"token variable\\\">&amp;amp</span><span class=\\\"token punctuation\\\">;</span>func<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"This is a func\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># either works</span>\\n<span class=\\\"token variable\\\">&amp;amp</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">sub</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"anonymously, yours\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\"># refrence an anonymous function </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> func<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\"># this is a closure in perl.</span>\\n\\t<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"I am a local variable\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\treturn <span class=\\\"token keyword\\\">sub</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># finding a reference Type </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$r</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>one<span class=\\\"token punctuation\\\">,</span> two<span class=\\\"token punctuation\\\">,</span> three<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> ref<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$r</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># will return 'ARRAY'\\t\\t</span></code></pre>\\n      </div>\\n<p>File I/O </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># perl reads files as a stream </span>\\n\\n<span class=\\\"token comment\\\"># &amp;lt; read</span>\\n<span class=\\\"token comment\\\"># + read and overwrite </span>\\n<span class=\\\"token comment\\\"># &amp;gt;&amp;gt; apend </span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$filename</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"about.txt\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nopen <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$fh</span><span class=\\\"token punctuation\\\">,</span> '<span class=\\\"token variable\\\">&amp;lt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token operator\\\">&amp;</span><span class=\\\"token comment\\\">#039;, $filename ) or die &amp;quot;Can&amp;#039;t open file: $!&amp;quot;;</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$line</span> <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    chomp <span class=\\\"token variable\\\">$line</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># chomp is great for getting line endings correct for your OS </span>\\n    <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$line</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nclose <span class=\\\"token variable\\\">$fh</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># It's better to use a scoped variable than a bare word for the file handle</span>\\n<span class=\\\"token comment\\\"># since that defaults to global</span>\\n<span class=\\\"token comment\\\"># A bareword is a word without quotes that Perl allows to behave as a string.</span>\\n\\n\\n<span class=\\\"token comment\\\"># The OO file interface </span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token vstring string\\\">5.18.0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> warnings<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> IO<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span>File<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$filename</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'lines.txt'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$file</span> <span class=\\\"token operator\\\">=</span> IO<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span>File<span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span>new<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"getline()) {\\n    print $line;\\n}\\nsay \\\"</span>Done<span class=\\\"token string\\\">\\\";\\n\\n\\n# Binary Files \\n\\nuse 5.18.0;\\nuse warnings;\\nuse IO::File;\\n\\nmy $filename = 'pic.jpg';\\nmy $copyfilename = 'copypic.jpg' \\n\\nmy $file = IO::File-&amp;gt;new(\\\"</span>new<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"&amp;gt; $copyfilename\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">or</span> <span class=\\\"token keyword\\\">die</span> <span class=\\\"token string\\\">\\\"Cannot open output file $!\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\"># binmode is for Windows, mostly and it doesn't hurt anything if not needed.</span>\\n<span class=\\\"token variable\\\">$file</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span>binmode<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$copy</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span>binmode<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$buffer</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$len</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$file</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span>read<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$buffer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">102400</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$copy</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$buffer</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"Done\\\"</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Built In Functions </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># https://perldoc.perl.org/index-functions-by-cat.html</span>\\n<span class=\\\"token comment\\\"># string functions </span>\\n<span class=\\\"token keyword\\\">say</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\"># say outputs a new line at the end of the output Perl 5.10+</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># print and say default to sandard stream for their output </span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">%h</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>one <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> two <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> three <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> join <span class=\\\"token string\\\">', '</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">%h</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> join <span class=\\\"token string\\\">':'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span>\\n\\n$<span class=\\\"token regex\\\">s = \\\"This is a string with lots of words in it.\\\";\\nmy @a = split /\\\\s+/, $string;\\nsay join ':', @a;\\n\\nmy $string =</span> <span class=\\\"token string\\\">\\\"This is a string\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> length <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> chomp <span class=\\\"token variable\\\">$string</span><span class=\\\"token operator\\\">.</span> <span class=\\\"token comment\\\"># removes line ending in string</span>\\n\\n<span class=\\\"token keyword\\\">say</span> substr <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># return a substing </span>\\n<span class=\\\"token keyword\\\">say</span> substr<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$sring</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'too'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># replace</span>\\n\\n<span class=\\\"token keyword\\\">say</span> index <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'is'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># returns index of first occurance, 0 index.</span>\\n<span class=\\\"token keyword\\\">say</span> index <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'xis'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># returns -1 if not found</span>\\n<span class=\\\"token keyword\\\">say</span> index <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'is'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># start matching after 10 characters.</span>\\n<span class=\\\"token keyword\\\">say</span> rindex <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'is'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># match from right</span>\\n\\n<span class=\\\"token keyword\\\">say</span> reverse<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># reverse a string or a list;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> lc <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># lowercase the string</span>\\n<span class=\\\"token keyword\\\">say</span> uc <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token comment\\\"># uppercase string</span>\\n<span class=\\\"token keyword\\\">say</span> ucfirst <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># you get the idea</span>\\n\\n<span class=\\\"token comment\\\"># numeric functions </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$b</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token variable\\\">$b</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> abs <span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token variable\\\">$b</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> sqrt <span class=\\\"token variable\\\">$x</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> sqrt<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$a</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">**</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> atan2<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> hex <span class=\\\"token string\\\">'ff'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> oct <span class=\\\"token string\\\">'377'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> int <span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">.</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># returns integer portion </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> rand<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># rand b/t 0 and 1, first call to rand seeds the rand generator</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> rand <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> int rand <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> srand<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># seed the random number</span>\\n\\n\\n<span class=\\\"token comment\\\"># grep</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( two four six eight )</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> grep <span class=\\\"token regex\\\">/one/</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># match elements in the array</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> grep <span class=\\\"token operator\\\">!</span><span class=\\\"token regex\\\">/one/</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># don't match elements in the array</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> grep <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token regex\\\">/one/</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># don't match elements in the array</span>\\n\\n<span class=\\\"token comment\\\"># map </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> map <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token variable\\\">$_</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">9</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># time functions </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$t</span> <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># epoch time</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$timestring</span> <span class=\\\"token operator\\\">=</span> localtime<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$t</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">#convert epoch to a list of time or a string,</span>\\n\\n<span class=\\\"token comment\\\"># formatting time</span>\\n<span class=\\\"token comment\\\"># time in perl is similar to the unix C liberary </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$sec</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$min</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$hour</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$mday</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$mon</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$year</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$wday</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$yday</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$isdst</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> localtime<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$t</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$mon</span> <span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># helps with 0 based </span>\\n<span class=\\\"token variable\\\">$year</span> <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1900</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># the year needs to have this added since it's an orbitol year</span>\\n\\n<span class=\\\"token comment\\\"># add leading zeros to numerics for display </span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$mon</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$mday</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$hour</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$min</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$sec</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token variable\\\">$_</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"0$_\\\"</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token variable\\\">$_</span> <span class=\\\"token punctuation\\\">{</span>number<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> shift <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    return <span class=\\\"token variable\\\">$self</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> number</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$self</span> <span class=\\\"token operator\\\">=</span> shift<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$self</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span>number<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> shift <span class=\\\"token keyword\\\">if</span> <span class=\\\"token variable\\\">@_</span><span class=\\\"token punctuation\\\">;</span>\\n    return <span class=\\\"token variable\\\">$self</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span>number<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> version</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tshift<span class=\\\"token punctuation\\\">;</span>\\n\\treturn <span class=\\\"token variable\\\">$VERSION</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># for compatability, end with a true value</span>\\n\\n<span class=\\\"token comment\\\">## End example module Simple.pm </span></code></pre>\\n      </div>\\n<p>Best Practices </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># use ending semicolons </span>\\n<span class=\\\"token comment\\\"># consistently format code blocks</span>\\n<span class=\\\"token comment\\\"># consistently name things</span>\\n<span class=\\\"token comment\\\"># perl best practice is lowercase variable names</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$variable_name</span><span class=\\\"token punctuation\\\">;</span>\\nPackage DL<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span>Class<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$object</span> <span class=\\\"token operator\\\">=</span> DL<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span>Class<span class=\\\"token punctuation\\\">;</span>\\n\\nCONSTANT_NAME\\n<span class=\\\"token comment\\\"># use constants wherever you would use them in another language </span>\\n\\n<span class=\\\"token keyword\\\">use</span> constant <span class=\\\"token punctuation\\\">{</span>\\n    TRUE <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    FALSE <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token string\\\">\\\"\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> constant DEBUG <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> TRUE<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func_name</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">.</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># use simple terse comments and whitespace </span>\\n<span class=\\\"token comment\\\"># strict mode is on by default in perl 5.18.0 + </span>\\n<span class=\\\"token comment\\\"># use warnings is optional </span>\\n<span class=\\\"token comment\\\"># you can use 'no warnings' inside of a sub routine </span>\\n<span class=\\\"token comment\\\"># Try not to use the 'local' keyword. </span>\\n<span class=\\\"token keyword\\\">local</span> <span class=\\\"token comment\\\">#temp assigns a new value to a global variable and is a relic </span></code></pre>\\n      </div>\\n<p>Text Input</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">use</span> feature <span class=\\\"token string\\\">'say'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"This is your last chance. What will it be, the red pill or the blue?\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'...'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$answer</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">;</span>\\nchop <span class=\\\"token variable\\\">$answer</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$answer</span> <span class=\\\"token operator\\\">=~</span> <span class=\\\"token regex\\\">/blue/i</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"The story is ends here for you.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">elsif</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$answer</span> <span class=\\\"token operator\\\">=~</span> <span class=\\\"token regex\\\">/red/i</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"You stay in Wonderland.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"Agent Smith, you'll never win.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>References  And Further Reading</p>\\n<p>Most of these notes are from Bill Weinman's course on Lynda.com </p>\\n<p>Bill Weinman <a href=\\\"http://perl.bw.org\\\">http://perl.bw.org</a></p>\\n<p>Lynda.com <a href=\\\"https://www.lynda.com/Perl-tutorials/Perl-5-Essential-Training/447321-2.html\\\">https://www.lynda.com/Perl-tutorials/Perl-5-Essential-Training/447321-2.html</a></p>\\n<p><a href=\\\"https://www.thegeekstuff.com/2010/01/20-killer-perl-programming-tips-for-beginners-on-unix-linux-os\\\">https://www.thegeekstuff.com/2010/01/20-killer-perl-programming-tips-for-beginners-on-unix-linux-os</a></p>\\n<p><a href=\\\"https://perlmaven.com\\\">https://perlmaven.com</a></p>\\n<p><a href=\\\"https://learn.perl.org/docs/keywords.html#perlvar\\\">https://learn.perl.org/docs/keywords.html#perlvar</a></p>\\n<p><a href=\\\"https://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default\\\">https://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default</a></p>\",\"frontmatter\":{\"title\":\"Practical Perl Primer\",\"date\":\"July 22nd, 2018\"}}},\"pathContext\":{\"slug\":\"/blog-posts/perl/practical-perl-primer/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-posts-perl-practical-perl-primer-072af453ad3183c04686.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Documentation</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># https://perldoc.perl.org/index-language.html</span>\\nperldoc <span class=\\\"token operator\\\">-f</span> chomp <span class=\\\"token comment\\\"># perldoc on chomp</span>\\nperldoc perlfaq</code></pre>\\n      </div>\\n<p>Misc</p>\\n<ul>\\n<li>\\n<p>The semicolon is technically a separator, but it is good practice to use it as a terminator at the end of each line of code. </p>\\n</li>\\n<li>\\n<p>Whitespace is mostly ignored.</p>\\n<p>â€‹</p>\\n</li>\\n</ul>\\n<p>Variables and Values </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># represent a scalar value with $, Perl uses duck typeing for scalar value</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$n</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># represent arrays with @</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@array</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw(one two three four five)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># represent hashes with %</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">%hash</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>one <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> two <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> three <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># a list is a fixed series of scalar values. </span>\\n<span class=\\\"token comment\\\"># a list is not a data type, but it is used to create arrays and hashes in the examples above. </span>\\n<span class=\\\"token comment\\\"># a list is created with \\\"()\\\". </span>\\n<span class=\\\"token comment\\\"># a list is not mutable. </span>\\n<span class=\\\"token comment\\\"># it's possible to create references to lists.</span>\\n<span class=\\\"token variable\\\">$list</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'one'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'one'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'three'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token variable\\\">$var</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># force num </span>\\n<span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">.</span> <span class=\\\"token variable\\\">$var</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># force string</span></code></pre>\\n      </div>\\n<p>Statements and Expressions </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># expressions represent values</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># statements instruct computers on how to execute code</span>\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> main</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"Hi\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Assignment Examples </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">my</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$x</span><span class=\\\"token punctuation\\\">,</span> $<span class=\\\"token regex\\\">y, $z ) = ( 1, 2,</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># assign multiple scalare variables from a list</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@array</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># create an array from a list</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$count</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># assign the length of the array</span></code></pre>\\n      </div>\\n<p>Block and Scope</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\">#!/usr/bin/perl</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token vstring string\\\">5.18.0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> warnings<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> strict<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># if there is no block the scope is the whole file. Perl is block scoped.</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\"># $var scope is locally to code block</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$var</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$num</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$num</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\"># $num2 is scoped to this code block </span>\\n  <span class=\\\"token comment\\\"># since that is where it's defined</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$num2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">;</span>\\n  \\n  <span class=\\\"token comment\\\"># $num can be used here </span>\\n  <span class=\\\"token variable\\\">$num</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$num</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token variable\\\">$num2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\"># $num2 is out of variable scope</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$num2</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Logical Values </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># false values: '', 0, []  in general things that are empty or evalute to 0</span>\\n<span class=\\\"token comment\\\"># everything else evaluates to true</span>\\n<span class=\\\"token comment\\\"># this is becuase of Perls duck typing.</span>\\nhttps<span class=\\\"token punctuation\\\">:</span><span class=\\\"token operator\\\">//</span>perlmaven<span class=\\\"token operator\\\">.</span>com<span class=\\\"token operator\\\">/</span>boolean<span class=\\\"token operator\\\">-</span>values<span class=\\\"token operator\\\">-</span>in<span class=\\\"token operator\\\">-</span>perl</code></pre>\\n      </div>\\n<p>Strings</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"I am a string\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"s is [$s]\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">#string concatenation</span>\\n$<span class=\\\"token regex\\\">s .= \\\" in a Perl expression\\\";\\n\\n#string interpolation\\nsay \\\"My name is String. $s .</span><span class=\\\"token string\\\">\\\";\\nsay \\\"</span>My name is String<span class=\\\"token operator\\\">.</span> <span class=\\\"token operator\\\">\\\\</span>\\\"<span class=\\\"token variable\\\">$s</span><span class=\\\"token operator\\\">\\\\</span>\\\" <span class=\\\"token operator\\\">.</span>\\\"<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"My name is String. ${s}.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">qq(My name is String. $s .)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Arrays</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@array</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>one<span class=\\\"token punctuation\\\">,</span> two<span class=\\\"token punctuation\\\">,</span> three<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$array</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># the $ is used to reference a scalar value in the array.</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$count</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\npush <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">qw(one two three)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$item</span> <span class=\\\"token operator\\\">=</span> pop <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># slices represent part of the whole</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">...</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@arr2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># create a reference to an anonymous array.</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@arr</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( one, two, three, four )</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">\\\\</span><span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># dereference the reference into the array it references</span></code></pre>\\n      </div>\\n<p>Hashes</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># hash values are not stored in any predictable order</span>\\n\\n<span class=\\\"token comment\\\"># create anonymous hash reference </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    one <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">\\\"one\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    two <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">\\\"two\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># access element</span>\\n<span class=\\\"token variable\\\">$</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">{</span>one<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-></span><span class=\\\"token punctuation\\\">{</span>one<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># create a hash</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">%hash</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>\\n\\tone <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span>\\n\\ttwo <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'two'</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$k</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$v</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> each <span class=\\\"token variable\\\">%hash</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"$k -> $v\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">## refrence an anonymous function</span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$k</span> <span class=\\\"token punctuation\\\">(</span>sort<span class=\\\"token punctuation\\\">(</span>keys <span class=\\\"token variable\\\">%hash</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$v</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$hash</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$k</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"$k -> $v\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> keys <span class=\\\"token variable\\\">%hash</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> values <span class=\\\"token variable\\\">%hash</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Constants  and Static Variables</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># contants can be create in perl as follows</span>\\n<span class=\\\"token keyword\\\">use</span> contant <span class=\\\"token punctuation\\\">{</span>\\n  PIE <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">3.1415</span>\\n  TRUE <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> \\n  FALSE <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">''</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># The use constant is the same as the sub below. </span>\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> PIE</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token number\\\">3.1415</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\"># Perl 5.10 + support static variabls </span>\\n<span class=\\\"token keyword\\\">use</span> feature <span class=\\\"token string\\\">'state'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">state</span> <span class=\\\"token variable\\\">$n</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># static variable will not be garbage collected for the entire runtime of the script. So if you use it in a function, consecutive function calls will remember the value.</span></code></pre>\\n      </div>\\n<p>Conditionals </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">==</span> $<span class=\\\"token regex\\\">y ) {\\n  $x = $y;\\n} elsif ( $x > $y ) {\\n  # note the spelling 'elsif'\\n $x = 10;\\n} else {\\n  $x = 15;\\n}\\n\\n# single line postifix if\\n# can't use else \\nsay 'true' if $x = 1;\\n\\n# unless \\nsay 'true' unless $x = 1;\\n\\n# Don't do this 'given' and switches are generally discouraged.\\nmy $x;\\nmy $y;\\nmy $z;\\n\\ngiven($v)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">when</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'default'</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># instead do this</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">%hash</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'x'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$y</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'y'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$z</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">'z'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$hash</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$x</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$hash</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$v</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'default'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># ternary if </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token variable\\\">$y</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'x'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'y'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Loops </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># iterate over a quote word list</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span>  <span class=\\\"token string\\\">qw(one two three)</span>\\n\\n<span class=\\\"token comment\\\"># while </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@array</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( one two three four five )</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$count</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> shift <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token variable\\\">$y</span> <span class=\\\"token operator\\\">=</span> shift <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">next</span> <span class=\\\"token keyword\\\">if</span> $<span class=\\\"token regex\\\">y eq 20;\\n  last if $y eq  5;\\n} continue</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token variable\\\">$count</span><span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># for</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$i</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token variable\\\">$arr</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">$i</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token operator\\\">++</span><span class=\\\"token variable\\\">$i</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"$i: \\\"</span> <span class=\\\"token operator\\\">.</span> <span class=\\\"token variable\\\">$arr</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">$i</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># foreach</span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">@arr</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$s</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Default Variables </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># https://perldoc.perl.org/perlvar.html</span>\\n<span class=\\\"token comment\\\"># http://www.perlmonks.org/?node_id=353259</span>\\n\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token variable\\\">@arr</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  says <span class=\\\"token variable\\\">$_</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\"># $_ optional value ommited will use the default variable $_</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@arr</span><span class=\\\"token punctuation\\\">;</span>\\n\\nfunc1<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'one'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'two'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func1</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'this is func1'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@_</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$a</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$b</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">@_</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\"># push pop shift unshift all use the default array variable</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># system error variable </span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> <span class=\\\"token operator\\\">-e</span> <span class=\\\"token variable\\\">$file</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"found\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$error</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$!</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># error variable </span>\\n  <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$error</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># env variables </span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$k</span> <span class=\\\"token punctuation\\\">(</span>sort keys <span class=\\\"token variable\\\">%ENV</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"$k = $ENV{$K}\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@ARGV</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># command-line arguments</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@numbers</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( 3 2 6 5 8 7 9 2 3 7 )</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@numbers</span> <span class=\\\"token operator\\\">=</span> sort <span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">&lt;=></span> <span class=\\\"token variable\\\">$b</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token variable\\\">@numbers</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># $a and $b are sort variables.</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$0</span>   <span class=\\\"token comment\\\"># path of script </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$^</span>o<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># system name </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$^V</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># version of perl </span>\\n\\n<span class=\\\"token comment\\\"># autoflush variable, the system flushes the buffer at it's own disgression </span>\\n<span class=\\\"token variable\\\">$|</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># this turns on outoflush </span></code></pre>\\n      </div>\\n<p>Operators </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># $x = 1 + 2;</span>\\n<span class=\\\"token comment\\\"># \\\"\\\" eq | ne \\\"\\\"</span>\\n<span class=\\\"token comment\\\"># 1 == 1</span>\\n<span class=\\\"token comment\\\"># % modulus returns the remainder of division</span>\\n\\n<span class=\\\"token comment\\\"># compound assignment operator only evaluates once</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">## addition evaluates twice </span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">## relational Operators </span>\\n<span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">6</span>\\n<span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">6</span>\\n<span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">6</span>\\n<span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">6</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token number\\\">4</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">57</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># string operators</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">eq</span> <span class=\\\"token string\\\">\\\"str\\\"</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">ne</span> <span class=\\\"token string\\\">\\\"str\\\"</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">lt</span> <span class=\\\"token string\\\">\\\"str\\\"</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">le</span> <span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token comment\\\"># less than or equal to</span>\\n<span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">gt</span> <span class=\\\"token string\\\">\\\"str\\\"</span>\\n\\n<span class=\\\"token comment\\\">## logical opperators</span>\\n<span class=\\\"token keyword\\\">use</span> constant <span class=\\\"token punctuation\\\">{</span> TRUE <span class=\\\"token operator\\\">=></span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> FALSE <span class=\\\"token operator\\\">=></span> <span class=\\\"token string\\\">\\\"\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">and</span> <span class=\\\"token comment\\\">## ( true and true) == true</span>\\n<span class=\\\"token operator\\\">or</span>  <span class=\\\"token comment\\\">## ( false and true) == true </span>\\n<span class=\\\"token operator\\\">xor</span> <span class=\\\"token comment\\\">## one true the other false  (false and true) == true</span>\\n<span class=\\\"token operator\\\">not</span> <span class=\\\"token comment\\\">## ( not FALSE or not True) == true</span>\\n\\n<span class=\\\"token comment\\\">## File test operators </span>\\n<span class=\\\"token comment\\\"># see perldoc functions -X</span>\\n<span class=\\\"token comment\\\"># -s, non zero length</span>\\n<span class=\\\"token comment\\\"># -z, zero length</span>\\n<span class=\\\"token comment\\\"># -r, readable</span>\\n<span class=\\\"token comment\\\"># -w, writable</span>\\n<span class=\\\"token comment\\\"># -f, plain file </span>\\n<span class=\\\"token comment\\\"># -d, directory</span>\\n<span class=\\\"token comment\\\"># -e tests if file exists </span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-e</span> <span class=\\\"token variable\\\">$filename</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># Range Operator </span>\\n<span class=\\\"token comment\\\"># numbers, letters, dates,</span>\\n<span class=\\\"token comment\\\"># The range operator returns a list and can be used to create arrays </span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$i</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">...</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">\\\"$i \\\"</span><span class=\\\"token punctuation\\\">:</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># String concatentation operator </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"str\\\"</span> <span class=\\\"token operator\\\">.</span> <span class=\\\"token string\\\">\\\"ing\\\"</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token comment\\\">## Quote operators </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">q(Hello World)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">## no interpolation single quote marks</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">qq()</span> <span class=\\\"token comment\\\">## qq||, qq{} interprets variables like double quote </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">qw(one two three)</span> <span class=\\\"token comment\\\">## returns a list </span>\\n\\n<span class=\\\"token comment\\\"># Operator Precedence and Associativity</span>\\n<span class=\\\"token comment\\\"># https://perldoc.perl.org/perlop.html#Operator-Precedence-and-Associativity</span>\\n<span class=\\\"token comment\\\"># similar to mathematics</span></code></pre>\\n      </div>\\n<p>Context</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># perl supports two contexts list and scalar</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@arr</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw(one two three four five)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># an array can be used in list context or scalar context </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># list context will iterate over each element. </span>\\n<span class=\\\"token keyword\\\">say</span> scalar <span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># because we are accessing a scalar value it is the length of the arrays</span>\\n\\n<span class=\\\"token comment\\\"># context is important as it affect how certain functions and structure bahave in perl. </span>\\n\\n<span class=\\\"token comment\\\"># A sub can determine what context it was called in by using wantarray.</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> wantarray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">\\\"list\\\\n\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># https://perlmaven.com/scalar-and-list-context-in-perl</span></code></pre>\\n      </div>\\n<p>Regular Expressions</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># string replacement</span>\\n<span class=\\\"token keyword\\\">my</span> $<span class=\\\"token regex\\\">s = qq{I am a string with -- words and :: other characters};\\n$s =~ s/:/-/g;\\nsay $s;\\n\\n# string search\\nmy $s =</span> <span class=\\\"token string\\\">\\\"this is a line\\\"</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$re</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token regex\\\">qr/line/</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> $<span class=\\\"token regex\\\">s =~ $re ? \\\"True\\\" : \\\"False\\\";\\n\\nif ( $s =~ /line/i ) {\\n}\\n \\n# extract a match \\nmy $match =</span><span class=\\\"token operator\\\">~</span> <span class=\\\"token regex\\\">/(line)/</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># extract list of matches</span>\\n<span class=\\\"token keyword\\\">my</span> $<span class=\\\"token regex\\\">s = \\\"this is a string\\\";\\nmy @match = $s =</span><span class=\\\"token operator\\\">~</span> <span class=\\\"token regex\\\">/i(.)/g</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n\\n<span class=\\\"token comment\\\"># . 1 charater</span>\\n<span class=\\\"token comment\\\"># + 1 or more </span>\\n<span class=\\\"token comment\\\"># * 0 or more </span>\\n<span class=\\\"token comment\\\"># whildcard matching is greedy use *? to prevent greedy</span>\\n<span class=\\\"token comment\\\"># (tex?t) ? # optionally match the \\\"t\\\"</span>\\n<span class=\\\"token comment\\\"># \\\\s whitespace</span>\\n<span class=\\\"token comment\\\"># \\\\S not whitespace</span>\\n<span class=\\\"token comment\\\"># \\\\d digit </span>\\n<span class=\\\"token comment\\\"># \\\\D not digit </span>\\n<span class=\\\"token comment\\\"># \\\\w word class characters</span>\\n<span class=\\\"token comment\\\"># \\\\W none word characters</span>\\n<span class=\\\"token comment\\\"># [1234asdlk] anything in the brackets</span>\\n<span class=\\\"token comment\\\"># [1-9] 1-9,  [^1-9] not 1-9</span>\\n<span class=\\\"token comment\\\"># meta characters  {} [] () ^ $ . | * + ? \\\\</span>\\n<span class=\\\"token comment\\\"># use \\\"\\\\\\\" to escape meta characters</span>\\n\\n<span class=\\\"token comment\\\"># https://perldoc.perl.org/perlre.html</span></code></pre>\\n      </div>\\n<p>Functions and Subroutines </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># Subroutines and Functions are essentially the same thing in perl </span>\\n<span class=\\\"token comment\\\"># Gernally, it's best to return a scalar, a list, or a reference  </span>\\n<span class=\\\"token comment\\\"># IMPORTANT: The context a function is called in will propogate to the return value of the function.So the context of the return value will be either scalar or list based on how the context of the function. </span>\\n<span class=\\\"token comment\\\"># A sub can determine what context it was called in by using wantarray.</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span> wantarray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">print</span> <span class=\\\"token string\\\">\\\"list\\\\n\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\"># Function names have global scope and they can be called before they are defined in a script.</span>\\n<span class=\\\"token comment\\\"># Functions always return. Either explicitly by calling return or the last statement executed will be implicitly returned. It's reccomended to always explicitly return</span>\\n<span class=\\\"token comment\\\"># Perl supportes closures and higher order functions and is considered a functional programming languages. </span>\\n<span class=\\\"token comment\\\"># https://hop.perl.plover.com/</span>\\n<span class=\\\"token comment\\\"># http://www.perlmonks.org/?node_id=450922</span>\\n\\nhello<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> hello</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> say</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$word</span> <span class=\\\"token operator\\\">=</span> shift<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># get variable from default array;</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$word</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> say</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@_</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># Get variables from default array </span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># function references </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">\\\\</span><span class=\\\"token variable\\\">&amp;amp</span><span class=\\\"token punctuation\\\">;</span>func<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"This is a func\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">#either works</span>\\n<span class=\\\"token variable\\\">&amp;amp</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">sub</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"anonymously, yours\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\"># refrence an anonymous function  </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> func<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\"># This is a closure in perl.</span>\\n\\t<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"I am a local variable\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\treturn <span class=\\\"token keyword\\\">sub</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>References </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># References are smaller pieces of memory refer to larger pieces of memory. They are useful for working with arrays, hashes, and functions.</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@arr</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( one, two, three, four )</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">\\\\</span><span class=\\\"token variable\\\">@array</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token variable\\\">@</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># dereference the reference into the array it references</span>\\n\\n<span class=\\\"token comment\\\"># create a reference to an anonymous array</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">qw( one, two, three, four )</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># parens alone creat an anonymous list </span>\\n<span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span> one<span class=\\\"token punctuation\\\">,</span> two<span class=\\\"token punctuation\\\">,</span> three<span class=\\\"token punctuation\\\">,</span> four <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># create anonymous hash reference </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    one <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token string\\\">\\\"one\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    two <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token string\\\">\\\"two\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># access element</span>\\n<span class=\\\"token variable\\\">$</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">{</span>one<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span>one<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># function references </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">\\\\</span><span class=\\\"token variable\\\">&amp;amp</span><span class=\\\"token punctuation\\\">;</span>func<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"This is a func\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># either works</span>\\n<span class=\\\"token variable\\\">&amp;amp</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token variable\\\">$ref</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">sub</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"anonymously, yours\\\"</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\"># refrence an anonymous function </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$ref</span> <span class=\\\"token operator\\\">=</span> func<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$ref</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token comment\\\"># this is a closure in perl.</span>\\n\\t<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"I am a local variable\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\treturn <span class=\\\"token keyword\\\">sub</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$s</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># finding a reference Type </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$r</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>one<span class=\\\"token punctuation\\\">,</span> two<span class=\\\"token punctuation\\\">,</span> three<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> ref<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$r</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\"># will return 'ARRAY'\\t\\t</span></code></pre>\\n      </div>\\n<p>File I/O </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># perl reads files as a stream </span>\\n\\n<span class=\\\"token comment\\\"># &amp;lt; read</span>\\n<span class=\\\"token comment\\\"># + read and overwrite </span>\\n<span class=\\\"token comment\\\"># &amp;gt;&amp;gt; apend </span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$filename</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"about.txt\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nopen <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$fh</span><span class=\\\"token punctuation\\\">,</span> '<span class=\\\"token variable\\\">&amp;lt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token operator\\\">&amp;</span><span class=\\\"token comment\\\">#039;, $filename ) or die &amp;quot;Can&amp;#039;t open file: $!&amp;quot;;</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$line</span> <span class=\\\"token operator\\\">=</span>  <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    chomp <span class=\\\"token variable\\\">$line</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># chomp is great for getting line endings correct for your OS </span>\\n    <span class=\\\"token keyword\\\">say</span> <span class=\\\"token variable\\\">$line</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nclose <span class=\\\"token variable\\\">$fh</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># It's better to use a scoped variable than a bare word for the file handle</span>\\n<span class=\\\"token comment\\\"># since that defaults to global</span>\\n<span class=\\\"token comment\\\"># A bareword is a word without quotes that Perl allows to behave as a string.</span>\\n\\n\\n<span class=\\\"token comment\\\"># The OO file interface </span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token vstring string\\\">5.18.0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> warnings<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">use</span> IO<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span>File<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$filename</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'lines.txt'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$file</span> <span class=\\\"token operator\\\">=</span> IO<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span>File<span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span>new<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"getline()) {\\n    print $line;\\n}\\nsay \\\"</span>Done<span class=\\\"token string\\\">\\\";\\n\\n\\n# Binary Files \\n\\nuse 5.18.0;\\nuse warnings;\\nuse IO::File;\\n\\nmy $filename = 'pic.jpg';\\nmy $copyfilename = 'copypic.jpg' \\n\\nmy $file = IO::File-&amp;gt;new(\\\"</span>new<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"&amp;gt; $copyfilename\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">or</span> <span class=\\\"token keyword\\\">die</span> <span class=\\\"token string\\\">\\\"Cannot open output file $!\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\"># binmode is for Windows, mostly and it doesn't hurt anything if not needed.</span>\\n<span class=\\\"token variable\\\">$file</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span>binmode<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$copy</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span>binmode<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$buffer</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$len</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$file</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span>read<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$buffer</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">102400</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$copy</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$buffer</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"Done\\\"</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Built In Functions </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># https://perldoc.perl.org/index-functions-by-cat.html</span>\\n<span class=\\\"token comment\\\"># string functions </span>\\n<span class=\\\"token keyword\\\">say</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\"># say outputs a new line at the end of the output Perl 5.10+</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\"># print and say default to sandard stream for their output </span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">%h</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>one <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> two <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> three <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> join <span class=\\\"token string\\\">', '</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">%h</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> join <span class=\\\"token string\\\">':'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span>\\n\\n$<span class=\\\"token regex\\\">s = \\\"This is a string with lots of words in it.\\\";\\nmy @a = split /\\\\s+/, $string;\\nsay join ':', @a;\\n\\nmy $string =</span> <span class=\\\"token string\\\">\\\"This is a string\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> length <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> chomp <span class=\\\"token variable\\\">$string</span><span class=\\\"token operator\\\">.</span> <span class=\\\"token comment\\\"># removes line ending in string</span>\\n\\n<span class=\\\"token keyword\\\">say</span> substr <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># return a substing </span>\\n<span class=\\\"token keyword\\\">say</span> substr<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$sring</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'too'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># replace</span>\\n\\n<span class=\\\"token keyword\\\">say</span> index <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'is'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># returns index of first occurance, 0 index.</span>\\n<span class=\\\"token keyword\\\">say</span> index <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'xis'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># returns -1 if not found</span>\\n<span class=\\\"token keyword\\\">say</span> index <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'is'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># start matching after 10 characters.</span>\\n<span class=\\\"token keyword\\\">say</span> rindex <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'is'</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># match from right</span>\\n\\n<span class=\\\"token keyword\\\">say</span> reverse<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># reverse a string or a list;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> lc <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># lowercase the string</span>\\n<span class=\\\"token keyword\\\">say</span> uc <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token comment\\\"># uppercase string</span>\\n<span class=\\\"token keyword\\\">say</span> ucfirst <span class=\\\"token variable\\\">$string</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># you get the idea</span>\\n\\n<span class=\\\"token comment\\\"># numeric functions </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$b</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token variable\\\">$b</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> abs <span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token variable\\\">$b</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> sqrt <span class=\\\"token variable\\\">$x</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> sqrt<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$a</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">**</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> atan2<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> hex <span class=\\\"token string\\\">'ff'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> oct <span class=\\\"token string\\\">'377'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> int <span class=\\\"token variable\\\">$a</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token number\\\">7</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">.</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># returns integer portion </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> rand<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># rand b/t 0 and 1, first call to rand seeds the rand generator</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> rand <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> int rand <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$x</span> <span class=\\\"token operator\\\">=</span> srand<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># seed the random number</span>\\n\\n\\n<span class=\\\"token comment\\\"># grep</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">@a</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">qw( two four six eight )</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> grep <span class=\\\"token regex\\\">/one/</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># match elements in the array</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> grep <span class=\\\"token operator\\\">!</span><span class=\\\"token regex\\\">/one/</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># don't match elements in the array</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> grep <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token regex\\\">/one/</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># don't match elements in the array</span>\\n\\n<span class=\\\"token comment\\\"># map </span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token keyword\\\">foreach</span> map <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token variable\\\">$_</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">9</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token variable\\\">@a</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\"># time functions </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$t</span> <span class=\\\"token operator\\\">=</span> time<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># epoch time</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$timestring</span> <span class=\\\"token operator\\\">=</span> localtime<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$t</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">#convert epoch to a list of time or a string,</span>\\n\\n<span class=\\\"token comment\\\"># formatting time</span>\\n<span class=\\\"token comment\\\"># time in perl is similar to the unix C liberary </span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$sec</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$min</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$hour</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$mday</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$mon</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$year</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$wday</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$yday</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$isdst</span> <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> localtime<span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$t</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token variable\\\">$mon</span> <span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># helps with 0 based </span>\\n<span class=\\\"token variable\\\">$year</span> <span class=\\\"token operator\\\">+=</span> <span class=\\\"token number\\\">1900</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># the year needs to have this added since it's an orbitol year</span>\\n\\n<span class=\\\"token comment\\\"># add leading zeros to numerics for display </span>\\n<span class=\\\"token keyword\\\">foreach</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$mon</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$mday</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$hour</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$min</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token variable\\\">$sec</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token variable\\\">$_</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"0$_\\\"</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token variable\\\">$_</span> <span class=\\\"token punctuation\\\">{</span>number<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> shift <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n    return <span class=\\\"token variable\\\">$self</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> number</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$self</span> <span class=\\\"token operator\\\">=</span> shift<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token variable\\\">$self</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span>number<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> shift <span class=\\\"token keyword\\\">if</span> <span class=\\\"token variable\\\">@_</span><span class=\\\"token punctuation\\\">;</span>\\n    return <span class=\\\"token variable\\\">$self</span><span class=\\\"token operator\\\">-</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">{</span>number<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> version</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tshift<span class=\\\"token punctuation\\\">;</span>\\n\\treturn <span class=\\\"token variable\\\">$VERSION</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\"># for compatability, end with a true value</span>\\n\\n<span class=\\\"token comment\\\">## End example module Simple.pm </span></code></pre>\\n      </div>\\n<p>Best Practices </p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token comment\\\"># use ending semicolons </span>\\n<span class=\\\"token comment\\\"># consistently format code blocks</span>\\n<span class=\\\"token comment\\\"># consistently name things</span>\\n<span class=\\\"token comment\\\"># perl best practice is lowercase variable names</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$variable_name</span><span class=\\\"token punctuation\\\">;</span>\\nPackage DL<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span>Class<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$object</span> <span class=\\\"token operator\\\">=</span> DL<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span>Class<span class=\\\"token punctuation\\\">;</span>\\n\\nCONSTANT_NAME\\n<span class=\\\"token comment\\\"># use constants wherever you would use them in another language </span>\\n\\n<span class=\\\"token keyword\\\">use</span> constant <span class=\\\"token punctuation\\\">{</span>\\n    TRUE <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span>\\n    FALSE <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token string\\\">\\\"\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">use</span> constant DEBUG <span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">&amp;gt</span><span class=\\\"token punctuation\\\">;</span> TRUE<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\"><span class=\\\"token keyword\\\">sub</span> func_name</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token operator\\\">.</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\"># use simple terse comments and whitespace </span>\\n<span class=\\\"token comment\\\"># strict mode is on by default in perl 5.18.0 + </span>\\n<span class=\\\"token comment\\\"># use warnings is optional </span>\\n<span class=\\\"token comment\\\"># you can use 'no warnings' inside of a sub routine </span>\\n<span class=\\\"token comment\\\"># Try not to use the 'local' keyword. </span>\\n<span class=\\\"token keyword\\\">local</span> <span class=\\\"token comment\\\">#temp assigns a new value to a global variable and is a relic </span></code></pre>\\n      </div>\\n<p>Text Input</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"perl\\\">\\n      <pre class=\\\"perl\\\"><code class=\\\"perl\\\"><span class=\\\"token keyword\\\">use</span> feature <span class=\\\"token string\\\">'say'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"This is your last chance. What will it be, the red pill or the blue?\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">'...'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">my</span> <span class=\\\"token variable\\\">$answer</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">;</span>\\nchop <span class=\\\"token variable\\\">$answer</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$answer</span> <span class=\\\"token operator\\\">=~</span> <span class=\\\"token regex\\\">/blue/i</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"The story is ends here for you.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">elsif</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$answer</span> <span class=\\\"token operator\\\">=~</span> <span class=\\\"token regex\\\">/red/i</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"You stay in Wonderland.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">say</span> <span class=\\\"token string\\\">\\\"Agent Smith, you'll never win.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>References  And Further Reading</p>\\n<p>Most of these notes are from Bill Weinman's course on Lynda.com </p>\\n<p>Bill Weinman <a href=\\\"http://perl.bw.org\\\">http://perl.bw.org</a></p>\\n<p>Lynda.com <a href=\\\"https://www.lynda.com/Perl-tutorials/Perl-5-Essential-Training/447321-2.html\\\">https://www.lynda.com/Perl-tutorials/Perl-5-Essential-Training/447321-2.html</a></p>\\n<p><a href=\\\"https://www.thegeekstuff.com/2010/01/20-killer-perl-programming-tips-for-beginners-on-unix-linux-os\\\">https://www.thegeekstuff.com/2010/01/20-killer-perl-programming-tips-for-beginners-on-unix-linux-os</a></p>\\n<p><a href=\\\"https://perlmaven.com\\\">https://perlmaven.com</a></p>\\n<p><a href=\\\"https://learn.perl.org/docs/keywords.html#perlvar\\\">https://learn.perl.org/docs/keywords.html#perlvar</a></p>\\n<p><a href=\\\"https://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default\\\">https://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default</a></p>\",\"frontmatter\":{\"title\":\"Practical Perl Primer\",\"date\":\"July 22nd, 2018\"}}},\"pathContext\":{\"slug\":\"/blog-posts/perl/practical-perl-primer/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-posts-perl-practical-perl-primer.json\n// module id = 326\n// module chunks = 101223163826097"],"sourceRoot":""}